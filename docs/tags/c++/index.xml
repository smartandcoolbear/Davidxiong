<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 熊川樘的技术博客</title>
    <link>https://smartandcoolbear.github.io/Davidxiong/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 熊川樘的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://smartandcoolbear.github.io/Davidxiong/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>std::bind 和template的使用</title>
      <link>https://smartandcoolbear.github.io/Davidxiong/posts/2016/stdbind-%E5%92%8Ctemplate%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://smartandcoolbear.github.io/Davidxiong/posts/2016/stdbind-%E5%92%8Ctemplate%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>接上次的笔记，继续整理std::bind,std::function等函数，以及template的一些使用说明。
相关链接：
1.模板(Templates)
2.C++中的类模板详细讲述
3.C++11中的std::bind
4.什么是函数式编程思维？
Template的理解与使用 使用模板技术其实原因很简单，就是为了泛型编程。主要可以分为模板函数和模板类两个方面。具体来说，模板(Templates)使得我们可以生成通用的函数或类，这些函数或类能够接受任意数据类型的参数，可返回任意类型的值，而不需要对所有可能的数据类型进行函数重载。这在一定程度上实现了宏（macro）的作用。它们的原型定义可以是下面两种中的任何一个：
template &amp;lt;class identifier&amp;gt; function_declaration; template &amp;lt;typename identifier&amp;gt; function_declaration;  上面两种原型定义的不同之处在关键字class 或 typename的使用。它们实际是完全等价的，因为两种表达的意思和执行都一模一样。
举例来说：
template&amp;lt;class 模板参数表&amp;gt; class 类名｛ // 类定义．．．．．．   };
template 是声明类模板的关键字，表示声明一个模板，模板参数可以是一个，也可以是多个，可以是类型参数 ，也可以是非类型参数。类型参数由关键字class或typename及其后面的标识符构成。非类型参数由一个普通参数构成，代表模板定义中的一个常量。
模板函数：
#include &amp;lt;iostream.h&amp;gt; template &amp;lt;class T&amp;gt; T GetMax (T a, T b) { T result; result = (a&amp;gt;b)? a : b; return (result); } int main () { int i=5, j=6, k; long l=10, m=5, n; k=GetMax(i,j); n=GetMax(l,m); cout &amp;lt;&amp;lt; k &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl; return 0; }  类模板：</description>
    </item>
    
  </channel>
</rss>
